import numpy as np
gap=-8
znak_gap='-' 

B50=np.array( [[5,-2,-1,-2,-1,-1,-1,0,-2,-1,-2,-1,-1,-3,-1,1,0,-3,-2,0], #A
              [-2,7,-1,-2,-1,1,0,-3,0,-4,-3,3,-2,-3,-3,-1,-1,-3,-1,-3], #R
              [-1,-1,7,2,-2,0,0,0,1,-3,-4,0,-2,-4,-2,-1,0,-4,-2,-3], #N
              [-2,-2,2,8,-4,0,2,-1,-1,-4,-4,-1,-4,-5,-1,0,-1,-5,-3,-4], #D
              [-1,-4,-2,-4,13,-3,-3,-3,-3,-2,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1], #C
              [-1,-1,0,0,-3,7,2,-2,1,-3,-2,2,0,-4,-1,0,-1,-1,-1,-3], #Q
              [-1,0,0,2,-3,2,6,-3,0,-4,-3,1,-2,-3,-1,-1,-1,-3,-2,-3], #E
              [0,-3,0,-1,-3,-2,-3,8,-2,-4,-4,-2,-3,-4,-2,0,-2,-3,-3,-4], #G
              [-2,0,1,-1,-3,1,0,-2,10,-4,-3,0,-1,-1,-2,-1,-2,-3,-1,4], #H
              [-1,-4,-3,-4,-2,-3,-4,-4,-4,5,2,-3,2,0,-3,-3,-1,-3,-1,4], #I
              [-2,-3,-4,-4,-2,-2,-3,-4,-3,2,5,-3,3,1,-4,-3,-1,-2,-1,1], #L
              [-1,3,0,-1,-3,2,1,-2,0,-3,-3,6,-2,-4,-1,0,-1,-3,-2,-3], #K
              [-1,-2,-2,-4,-2,0,-2,-3,-1,2,3,-2,7,0,-3,-2,-1,-1,0,1], #M
              [-3,-3,-4,-5,-2,-4,-3,-4,-1,0,1,-4,0,8,-4,-3,-2,1,4,-1], #F
              [-1,-3,-2,-1,-4,-1,-1,-2,-2,-3,-4,-1,-3,-4,10,-1,-1,-4,-3,-3],#P
              [1,-1,1,0,-1,0,-1,0,-1,-3,-3,0,-2,-3,-1,5,2,-4,-2,-2], #S
              [0,-1,0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1,2,5,-3,-2,0], #T
              [-3,-3,-4,-5,-5,-1,-3,-3,-3,-3,-2,-3,-1,1,-4,-4,-3,15,2,-3], #W
              [-2,-1,-2,-3,-3,-1,-2,-3,2,-1,-1,-2,0,4,-3,-2,-2,2,8,-1], #Y
              [0,-3,-3,-4,-1,-3,-3,-4,-4,4,1,-3,1,-1,-3,-2,0,-3,-1,5]],int) #V
PSL='ARNDCQEGHILKMFPSTWYV'

s2=input('Посл-сть в строчку:',) #В столбик(i)
s1=input('Посл-сть в столбик:',) #В строку(j)

n=int(len(s1)) #кол-во строк -->
k=int(len(s2)) #кол-во столбцов

matrix=[] #создали пустую матрицу для дальнейшей работы

for i in range(n+1):
    d2=[]
    for j in range(k+1):
        d2.append(0)
    matrix.append(d2)
matrix=np.array(matrix)
 #готовая матрица с нулями, которую нужно заполнить

for i in range(n+1):
    matrix[i][0]=gap*i
for j in range(k+1):
    matrix[0][j]=gap*j #заполнили гэпами матрицу (первую строку и первый столб)
for i in range(1,n):
    for j in range(1,k):
        kof_1=PSL.index(s1[i-1])
        kof_2=PSL.index(s2[j-1])
        elems_score=B50[kof_1,kof_2]

        matrix[i][j]=max([matrix[i][j-1]+gap,matrix[i-1][j]+gap,matrix[i-1][j-1]+elems_score])

        matrix[i+1][j]=max([matrix[i][j]+gap,matrix[i+1][j-1]+gap,matrix[i][j-1]+B50[PSL.index(s1[i]),PSL.index(s2[j-1])]])

        matrix[i][j+1]=max([matrix[i][j]+gap,matrix[i-1][j+1]+gap,matrix[i-1][j]+B50[PSL.index(s1[i-1]),PSL.index(s2[j])]])

    #создали матрицу по формуле - теперь нужно пройтись обратоно и сделать само выравнивание    

print('Матрица:',matrix)             

aln_1='' #пустая строка для готового выравнивания (1 посл-сть, в столбик которая)
aln_2='' #2-ая посл-сть, в строчку которая

for l in range(n*k):
     if s1[n-1]==s2[k-1]:
        aln_2=aln_2+s2[k-1]
        aln_1=aln_1+s1[n-1]   #  <---  реализация обратного пути
        n=n-1
        k=k-1
     else:
        if matrix[n-1][k]<matrix[n][k-1]:
            aln_1=aln_1+znak_gap
            aln_2=aln_2+s2[k-1]
            k=k-1
        elif matrix[n][k-1]<matrix[n-1][k]:
            aln_2=aln_2+znak_gap
            aln_1=aln_1+s1[n-1]
            n=n-1

aln_1=aln_1+s1[0]
aln_2=aln_2+s2[0]
     
aln_1=aln_1[::-1]    #переворачиваем строки 
aln_2=aln_2[::-1]
print('Первая Seq:',aln_1)
print('Вторая Seq:',aln_2)

kek_1=list(aln_1)
kek_2=list(aln_2)
lool=[] #матрица для хранения информации о сравнении
x=y=len(aln_1)-1
dlina=len(aln_1) #общая длина посл-стей
for i in range(0,x+1):
    for j in range(0,y+1):
        if kek_2[y]==kek_1[x]:
            lool.append(1)#совпадение=(1)
            x=x-1
            y=y-1
        elif kek_2[y]!=kek_1[x]:
            lool.append(0)#несовпадение=(0)
            x=x-1
            y=y-1          
sovp=lool.count(1) #число совпадений элементов
shodstvo=sovp/dlina
print('Общее сходство посл-стей =',shodstvo,'%')
